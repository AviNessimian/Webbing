{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsageService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = `${environment.baseUrl}/api/Usage`;\n  }\n  // Get usages grouped by SIM with query parameters\n  getUsagesGroupBySim(customerId, fromDate, toDate) {\n    const url = `${this.baseUrl}/usages-group-by-sim?customerId=${customerId}&fromDate=${fromDate.toISOString()}&toDate=${toDate.toISOString()}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  // Get usages grouped by customer with query parameters\n  getUsagesGroupByCustomer(fromDate, toDate) {\n    const url = `${this.baseUrl}/usages-group-by-customer?fromDate=${fromDate.toISOString()}&toDate=${toDate.toISOString()}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage;\n    if (error.error instanceof ErrorEvent) {\n      console.error('Client-side or network error occurred.');\n      errorMessage = `An error occurred: ${error.error.message}`;\n    } else {\n      console.error('The backend returned an unsuccessful response code.');\n      errorMessage = `Backend returned code ${error.status}: ${error.body.error}`;\n    }\n    return throwError(errorMessage);\n  }\n}\nUsageService.ɵfac = function UsageService_Factory(t) {\n  return new (t || UsageService)(i0.ɵɵinject(i1.HttpClient));\n};\nUsageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsageService,\n  factory: UsageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAAyBC,UAAU,QAAQ,MAAM;AACjD,SAASC,UAAU,QAAa,gBAAgB;;;AAOhD,OAAM,MAAOC,YAAY;EAGrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,GAAGL,WAAW,CAACM,OAAO,YAAY;EAEZ;EAExC;EACAC,mBAAmB,CAACC,UAAkB,EAAEC,QAAc,EAAEC,MAAY;IAChE,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,mCAAmCE,UAAU,aAAaC,QAAQ,CAACG,WAAW,EAAE,WAAWF,MAAM,CAACE,WAAW,EAAE,EAAE;IAC5I,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAkBF,GAAG,CAAC,CACrCG,IAAI,CACDZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC/B;EACT;EAEA;EACAC,wBAAwB,CAACP,QAAc,EAAEC,MAAY;IACjD,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,sCAAsCG,QAAQ,CAACG,WAAW,EAAE,WAAWF,MAAM,CAACE,WAAW,EAAE,EAAE;IACxH,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAuBF,GAAG,CAAC,CAC1CG,IAAI,CACDZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC/B;EACT;EAEQA,WAAW,CAACE,KAAU;IAC1B,IAAIC,YAAoB;IACxB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACnCC,OAAO,CAACH,KAAK,CAAC,wCAAwC,CAAC;MACvDC,YAAY,GAAG,sBAAsBD,KAAK,CAACA,KAAK,CAACI,OAAO,EAAE;KAC7D,MAAM;MAEHD,OAAO,CAACH,KAAK,CAAC,qDAAqD,CAAC;MACpEC,YAAY,GAAG,yBAAyBD,KAAK,CAACK,MAAM,KAAKL,KAAK,CAACM,IAAI,CAACN,KAAK,EAAE;;IAE/E,OAAOhB,UAAU,CAACiB,YAAY,CAAC;EACnC;;AAlCSf,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAqB,SAAZrB,YAAY;EAAAsB,YAFT;AAAM","names":["environment","throwError","catchError","UsageService","constructor","http","baseUrl","getUsagesGroupBySim","customerId","fromDate","toDate","url","toISOString","get","pipe","handleError","getUsagesGroupByCustomer","error","errorMessage","ErrorEvent","console","message","status","body","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Avi\\source\\repos\\AviNessimian\\Avi Nessimian-Software Engineer assignment\\Webbing.Assignment.UI\\ClientApp\\src\\app\\services\\usage.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { UsageByCustomerDTO, UsageBySimDTO } from \"../models/Usage\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UsageService {\r\n    private baseUrl = `${environment.baseUrl}/api/Usage`;\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    // Get usages grouped by SIM with query parameters\r\n    getUsagesGroupBySim(customerId: string, fromDate: Date, toDate: Date): Observable<UsageBySimDTO[]> {\r\n        const url = `${this.baseUrl}/usages-group-by-sim?customerId=${customerId}&fromDate=${fromDate.toISOString()}&toDate=${toDate.toISOString()}`;\r\n        return this.http.get<UsageBySimDTO[]>(url)\r\n            .pipe(\r\n                catchError(this.handleError)\r\n            );\r\n    }\r\n\r\n    // Get usages grouped by customer with query parameters\r\n    getUsagesGroupByCustomer(fromDate: Date, toDate: Date): Observable<UsageByCustomerDTO[]> {\r\n        const url = `${this.baseUrl}/usages-group-by-customer?fromDate=${fromDate.toISOString()}&toDate=${toDate.toISOString()}`;\r\n        return this.http.get<UsageByCustomerDTO[]>(url)\r\n            .pipe(\r\n                catchError(this.handleError)\r\n            );\r\n    }\r\n\r\n    private handleError(error: any) {\r\n        let errorMessage: string;\r\n        if (error.error instanceof ErrorEvent) {\r\n            console.error('Client-side or network error occurred.');\r\n            errorMessage = `An error occurred: ${error.error.message}`;\r\n        } else {\r\n\r\n            console.error('The backend returned an unsuccessful response code.');\r\n            errorMessage = `Backend returned code ${error.status}: ${error.body.error}`;\r\n        }\r\n        return throwError(errorMessage);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}